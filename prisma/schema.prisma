generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                Int  @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int   @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            Int    @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt DateTime @default(now())
  accounts      Account[]
  sessions      Session[]
  quiz          Quiz[]
  quizScores QuizScore[]
}

model QuizCategory {
  id Int @id @default(autoincrement())
  name String
  quizzes Quiz[]
}

model Quiz {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  category    QuizCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  coverImage  String
  createdAt   DateTime   @default(now())
  createdById Int
  plays       Int        @default(0)
  type        String     @default("multiple choice")
  quizScores  QuizScore[]
  createdBy   User       @relation(fields: [createdById], references: [id])
  questions   Question[]
  lowScore    String
  mediumScore String
  highScore   String

  @@index([createdById])
  @@index([categoryId])
}

model QuizScore {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  quizId Int
  quiz Quiz @relation(fields: [quizId], references: [id])
  score Int
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([quizId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Answer {
  id         Int   @id @default(autoincrement())
  answer     String
  isCorrect  Boolean
  createdAt  DateTime @default(now())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Question {
  id        Int   @id @default(autoincrement())
  question  String
  quizId    Int
  createdAt DateTime @default(now())
  answers   Answer[]
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}


