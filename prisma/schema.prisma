generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  quiz          Quiz[]
  quizScores QuizScore[]
}

model QuizScore {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  quizId String
  quiz Quiz @relation(fields: [quizId], references: [id])
  score Float

  @@index([userId])
  @@index([quizId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Answer {
  id         String   @id @default(uuid())
  answer     String
  isCorrect  Boolean
  createdAt  DateTime @default(now())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Question {
  id        String   @id @default(uuid())
  question  String
  quizId    String
  createdAt DateTime @default(now())
  answers   Answer[]
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

model Quiz {
  id          String     @id @default(uuid())
  title       String
  description String
  category    String
  coverImage  String
  createdAt   DateTime   @default(now())
  createdById String
  plays       Int        @default(0)
  type        String     @default("multiple choice")
  quizScores      QuizScore[]
  createdBy   User       @relation(fields: [createdById], references: [id])
  questions   Question[]
  lowScore    String
  mediumScore String
  highScore   String

  @@index([createdById])
}
